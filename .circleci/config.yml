version: 2.1

executors:
  macos:
    macos:
      xcode: 11.3.0

jobs:
  carthage_update:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-ios-{{ checksum "Cartfile" }}
      - run:
          name: Carthage Update
          command: carthage update
      - save_cache:
          key: judokit-ios-{{ checksum "Cartfile" }}
          paths:
            - ~/Library/Caches/org.carthage.CarthageKit
  bundle_install:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-ios-{{ checksum "Gemfile" }}
      - run:
          name: Bundle Install
          command: bundle install
      - save_cache:
          key: judokit-ios-{{ checksum "Gemfile" }}
          paths: ~/.bundle/cache
  build_sdk:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-ios-{{ checksum "Cartfile" }}
      - run:
          name: Build SDK
          command: |
            xcodebuild clean build \
              -project JudoKit_iOS.xcodeproj \
              -scheme JudoKit_iOS \
              -configuration Release \
              -sdk iphonesimulator \
              -derivedDataPath DerivedData
      - persist_to_workspace:
          root: .
          paths:
            - DerivedData
  build_sample:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-ios-{{ checksum "Cartfile" }}
      - run:
          name: Build Sample App
          command: |
            cd Examples/ObjectiveCExampleApp
            pod install
            xcodebuild clean build \
              -project ObjectiveCExampleApp.xcodeproj \
              -configuration Release \
              -sdk iphonesimulator
  unit_test_sdk:
    executor: macos
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Sonar Build Wrapper
          command: |
            export SONARSCANNER_VERSION=4.3.0.2102
            curl -o /var/tmp/build-wrapper-macosx-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-macosx-x86.zip
            unzip /var/tmp/build-wrapper-macosx-x86.zip -d /var/tmp
            sudo mkdir -p /opt/sonar-scanner-${SONARSCANNER_VERSION}-macosx/bin
            sudo mv /var/tmp/build-wrapper-macosx-x86/* /opt/sonar-scanner-${SONARSCANNER_VERSION}-macosx/bin/
            rm -rf /var/tmp/build-wrapper-macosx-x86
            ln -s /opt/sonar-scanner-${SONARSCANNER_VERSION}-macosx/bin/build-wrapper-macosx-x86 /usr/local/bin/build-wrapper-macosx-x86
      - run:
          name: Run SDK Unit Tests
          command: |
            build-wrapper-macosx-x86 --out-dir output xcodebuild \
              -project JudoKit_iOS.xcodeproj \
              -scheme JudoKit_iOS \
              -destination 'platform=iOS Simulator,name=iPhone 11' \
              -derivedDataPath DerivedData \
              test
      - run:
          name: Covert XCode Coverage Reports to SonarQube Format
          command: |
            curl -o xccov-to-sonarqube-generic.sh https://raw.githubusercontent.com/SonarSource/sonar-scanning-examples/master/swift-coverage/swift-coverage-example/xccov-to-sonarqube-generic.sh
            chmod +x xccov-to-sonarqube-generic.sh
            ./xccov-to-sonarqube-generic.sh DerivedData/Logs/Test/*.xcresult/ > DerivedData/sonarqube-generic-coverage.xml
            rm xccov-to-sonarqube-generic.sh
      - persist_to_workspace:
          root: .
          paths:
            - DerivedData
  validate_podspec:
    executor: macos
    steps:
      - checkout
      - run:
          name: Validate PodSpec
          command: pod lib lint --no-subspecs --allow-warnings

  # unit_test_sample:

  # instrumented_test_sample:

  sonar_scan:
    docker:
      - image: gcr.io/opnf-management/sonar-scanner:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run: /opt/run-scan.sh

  release_sample:
    executor: macos
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Firebase CLI
          command: curl -sL https://firebase.tools | bash
      - run:
          name: Store Google Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Create Release Notes
          command: echo "$(git log -1 --pretty=format:"%b")" > ./notes.txt
      - run:
          name: Distribute Sample App
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            firebase appdistribution:distribute \
              somepackage \
              --app "$IOS_FIREBASE_APP_ID" \
              --groups "default-testers" \
              --release-notes-file ./notes.txt

  release_sdk:
    executor: macos
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Release SDK to CocoaPods
          command: pod trunk push JudoKit-iOS.podspec --allow-warnings

workflows:
  version: 2
  build:
    jobs:
      - carthage_update
      - bundle_install
      - build_sdk:
          requires:
            - carthage_update
          filters:
            tags:
              only:
                - /^v((\d)+\.){1,2}(\d+)/i
      - build_sample
      - unit_test_sdk:
          requires:
            - build_sdk
      - validate_podspec
      - sonar_scan:
          context: shared-secrets
          requires:
            - unit_test_sdk
      - release_sample:
          context: shared-secrets
          requires:
            - build_sample
            - unit_test_sdk
            - validate_podspec
          filters:
            branches:
              only:
                - master
      - release_sdk:
          context: shared-secrets
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v((\d)+\.){1,2}(\d+)/i
